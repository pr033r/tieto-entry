#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace tieto_entry
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TietoEntry")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertObject(Object instance);
    partial void UpdateObject(Object instance);
    partial void DeleteObject(Object instance);
    partial void InsertEdge(Edge instance);
    partial void UpdateEdge(Edge instance);
    partial void DeleteEdge(Edge instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::tieto_entry.Properties.Settings.Default.TietoEntryConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Object> Objects
		{
			get
			{
				return this.GetTable<Object>();
			}
		}
		
		public System.Data.Linq.Table<Edge> Edges
		{
			get
			{
				return this.GetTable<Edge>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Object")]
	public partial class Object : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<double> _periphery;
		
		private EntitySet<Edge> _Edges;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnperipheryChanging(System.Nullable<double> value);
    partial void OnperipheryChanged();
    #endregion
		
		public Object()
		{
			this._Edges = new EntitySet<Edge>(new Action<Edge>(this.attach_Edges), new Action<Edge>(this.detach_Edges));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_periphery", DbType="Float")]
		public System.Nullable<double> periphery
		{
			get
			{
				return this._periphery;
			}
			set
			{
				if ((this._periphery != value))
				{
					this.OnperipheryChanging(value);
					this.SendPropertyChanging();
					this._periphery = value;
					this.SendPropertyChanged("periphery");
					this.OnperipheryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_Edge", Storage="_Edges", ThisKey="id", OtherKey="objectId")]
		public EntitySet<Edge> Edges
		{
			get
			{
				return this._Edges;
			}
			set
			{
				this._Edges.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Edges(Edge entity)
		{
			this.SendPropertyChanging();
			entity.Object = this;
		}
		
		private void detach_Edges(Edge entity)
		{
			this.SendPropertyChanging();
			entity.Object = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Edge")]
	public partial class Edge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private double _edge1;
		
		private int _objectId;
		
		private EntityRef<Object> _Object;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onedge1Changing(double value);
    partial void Onedge1Changed();
    partial void OnobjectIdChanging(int value);
    partial void OnobjectIdChanged();
    #endregion
		
		public Edge()
		{
			this._Object = default(EntityRef<Object>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="edge", Storage="_edge1", DbType="Float NOT NULL")]
		public double edge1
		{
			get
			{
				return this._edge1;
			}
			set
			{
				if ((this._edge1 != value))
				{
					this.Onedge1Changing(value);
					this.SendPropertyChanging();
					this._edge1 = value;
					this.SendPropertyChanged("edge1");
					this.Onedge1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_objectId", DbType="Int NOT NULL")]
		public int objectId
		{
			get
			{
				return this._objectId;
			}
			set
			{
				if ((this._objectId != value))
				{
					if (this._Object.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnobjectIdChanging(value);
					this.SendPropertyChanging();
					this._objectId = value;
					this.SendPropertyChanged("objectId");
					this.OnobjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_Edge", Storage="_Object", ThisKey="objectId", OtherKey="id", IsForeignKey=true)]
		public Object Object
		{
			get
			{
				return this._Object.Entity;
			}
			set
			{
				Object previousValue = this._Object.Entity;
				if (((previousValue != value) 
							|| (this._Object.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Object.Entity = null;
						previousValue.Edges.Remove(this);
					}
					this._Object.Entity = value;
					if ((value != null))
					{
						value.Edges.Add(this);
						this._objectId = value.id;
					}
					else
					{
						this._objectId = default(int);
					}
					this.SendPropertyChanged("Object");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
